

plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'// apply false
    id 'org.beryx.jlink' version '2.21.2'
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}

task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    mainClassName = 'Main.Starter'

}


/*
if (JavaVersion.current() == JavaVersion.VERSION_11
        || JavaVersion.current() == JavaVersion.VERSION_12){
    apply plugin: 'org.openjfx.javafxplugin'
}
*/
//apply plugin: 'java'
// external repositories where dependencies of your project are found
repositories {
    // Use 'jcenter' for resolving external dependencies
    jcenter()
    mavenCentral()
}


//if (JavaVersion.current() == JavaVersion.VERSION_11
//        || JavaVersion.current() == JavaVersion.VERSION_12) {
    javafx {
//        modules = [ 'javafx.controls', 'javafx.web', 'javafx.fxml', 'javafx.swing' ]
        modules = ['javafx.controls', 'javafx.swing']
    }
//}

configurations.all {
    exclude group: 'org.ejml', module: 'ejml-fdense'
    exclude group: 'org.ejml', module: 'ejml-zdense'
    exclude group: 'org.ejml', module: 'ejml-cdense'
}



dependencies {
    implementation group: 'org.ejml', name: 'ejml-simple', version: '0.38'

//    testCompile group: 'junit', name: 'junit', version: '4.12'
}


/*
jar {

    manifest {
        attributes ('Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'Main.Starter'//,
               // 'Implementation-Title': 'DiffyQGrapher'
        )
    }
    from {
        configurations.compile.collect { entry -> zipTree(entry) }
        configurations.runtimeClasspath.collect {it.isDirectory() ? it : zipTree(it)}
    }
    destinationDir = file("$rootDir/jar")
}
*/


version = '0.9.1'

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    mainClass = 'Main.Starter'
    launcher {
        name = 'diffyqapp'
    }
    jpackage {

//        jpackageHome = 'C:\\Users\\charl\\.jdks\\openjdk-14.0.2'
        installerType = 'deb'
        installerOptions = [
                '--app-version', version,
        ]
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'ico/homo.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'ico/homo.icns']
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'ico/diffyqapp.png']
            installerOptions += [
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'cs897@cornell.edu'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
            ]
        }
    }
}

jlinkZip {

}

task osxApp {
    dependsOn jar
    
    doLast {
        def dist = "${buildDir}/app/${project.name}.app"
        mkdir("$dist/Contents/MacOS")
        mkdir("$dist/Contents/Resources")
        ant.copy(file: "src/main/app/Info.plist", todir: "$dist/Contents")
        ant.copy(file: "src/main/app/launcher", todir: "$dist/Contents/MacOS") {
            filterset {
                filter(token: 'APP_JAR', value: "${project.name}-${version}.jar")
                filter(token: 'APP_NAME', value: project.name)
                filter(token: 'JAVA_VERSION', value: jvm_version)
            }
        }
        ant.copy(file: "src/main/app/application.icns", todir: "$dist/Contents/Resources")
        ant.copy(file: "build/libs/${project.name}-${version}.jar", todir: "$dist/Contents/MacOS")
        project.exec {
            commandLine('chmod', '+x', "$dist/Contents/MacOS/launcher")
        }
    }
}